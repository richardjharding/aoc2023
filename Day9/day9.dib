#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!fsharp

open System
open System.Linq

type History = {Readings: int list}

let loadHistory filepath =
    let input = System.IO.File.ReadAllText(filepath)
    let inputLines = input.Split("\r\n")
    let readings = inputLines |> Array.map (fun l -> l.Split(" ")|> Seq.map (fun s -> int s) |> Seq.toList) |> Array.map (fun x -> {Readings = x})
    readings

let records = loadHistory "sample.txt"

let calcDiffs (readings: int list) =
    readings |> List.pairwise |> List.map (fun p -> (snd p) - (fst p))

let allZero (diffs: int list) = 
    (diffs.Where(fun r -> r = 0)).Count() = diffs.Count()

let rec foo (acc: int list list) (readings: int list) = 
    let diffs = calcDiffs readings
    if (allZero diffs) then
        diffs :: acc |> List.rev
    else
        foo (diffs :: acc) diffs

let prediction (diffList: int list list) = 
    diffList |> List.map (fun diffs -> diffs.Last()) |> List.sum    

let predictBack (diffList: int list list) =
    diffList |> List.map (fun d -> d.First())  |> List.reduce (-)

let diffs =  foo [ (records.ElementAt(1).Readings)] (records.ElementAt(1).Readings)


let firstElements = diffs.Select(fun d -> d.First()) |> Seq.toList

let rec  monkey (toSubtract:int) (firstElementsRev: int list) =
    match firstElementsRev with
    | h :: t -> 
                if(t.Length = 0) then
                    toSubtract * -1
                else
                    let diff = t.First() - toSubtract
                    //printfn "to sub: %i\r\n" diff
                    monkey (diff) t 
    | [] -> toSubtract * -1
    


let toSub (elements: int list)=  
    let subt = monkey 0 (elements)
    if(subt < 0) then
         (subt * -1)
    else subt

let firstHistory (elements: int list) =
    let sub = toSub elements
    (elements.First() - sub)

firstHistory firstElements

records |> Array.map (fun r -> foo [r.Readings] r.Readings) |> Array.map (fun d -> d.Select(fun x -> x.First())) |> Array.map (fun z -> Seq.toList z) |> Array.map (fun h -> firstHistory h) |> Array.sum
